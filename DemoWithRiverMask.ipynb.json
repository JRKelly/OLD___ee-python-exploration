{
 "metadata": {
  "name": "",
  "signature": "sha256:6fea8313d2b8c1a94f9000b93f54ea4e5021869be1c2cb392bc7cc6ee2016e79"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "\n",
      "from __future__ import print_function # For py 2.7 compat\n",
      "\n",
      "import ee\n",
      "import os\n",
      "\n",
      "from IPython.html import widgets\n",
      "from IPython.display import display\n",
      "from IPython.utils import traitlets\n",
      "from IPython.core.display import Javascript"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## requires modules ee, os, ipython, shapely, geopandas, statsmodels (scipy), matplotlib & pyplot (numpy)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# This script assumes your authentification credentials are stored as operatoring system\n",
      "# environment variables.\n",
      "MY_SERVICE_ACCOUNT = os.environ.get('MY_SERVICE_ACCOUNT')\n",
      "MY_PRIVATE_KEY_FILE = os.environ.get('MY_PRIVATE_KEY_FILE')\n",
      "\n",
      "# Initialize the Earth Engine object, using your authentication credentials.\n",
      "ee.Initialize(ee.ServiceAccountCredentials(MY_SERVICE_ACCOUNT, MY_PRIVATE_KEY_FILE))\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Tyler Erickson's Google Maps widget."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "class GoogleMapsWidget(widgets.DOMWidget):\n",
      "    _view_name = traitlets.Unicode('GoogleMapsView', sync=True)\n",
      "    value = traitlets.Unicode(sync=True)\n",
      "    description = traitlets.Unicode(sync=True)\n",
      "    lat = traitlets.CFloat(0, help=\"Center latitude, -90 to 90\", sync=True)\n",
      "    lng = traitlets.CFloat(0, help=\"Center longitude, -180 to 180\", sync=True)\n",
      "    zoom = traitlets.CInt(0, help=\"Zoom level, 0 to ~25\", sync=True)\n",
      "    bounds = traitlets.List([], help=\"Visible bounds, [W, S, E, N]\", sync=True)\n",
      "    \n",
      "    def __init__(self, lng=0.0, lat=0.0, zoom=2):\n",
      "        self.lng = lng\n",
      "        self.lat = lat\n",
      "        self.zoom = zoom\n",
      "        \n",
      "    def addLayer(self, image, vis_params=None, name=None, visible=True):\n",
      "        mapid = image.getMapId(vis_params)\n",
      "        self.send({'command':'addLayer', 'mapid': mapid['mapid'], 'token': mapid['token'], 'name': name, 'visible': visible})\n",
      "        \n",
      "    def center(self, lng, lat, zoom=None):\n",
      "        self.send({'command': 'center', 'lng': lng, 'lat': lat, 'zoom': zoom})"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Tyler's Javascript code for the widget."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%%javascript\n",
      "\n",
      "require([\"widgets/js/widget\"], function(WidgetManager){\n",
      "    var maps = [];\n",
      "    \n",
      "    // Define the GoogleMapsView\n",
      "    var GoogleMapsView = IPython.DOMWidgetView.extend({\n",
      "        \n",
      "        render: function() {\n",
      "            // Resize widget element to be 100% wide\n",
      "            this.$el.css('width', '100%');\n",
      "\n",
      "            // iframe source;  just enough to load Google Maps and let us poll whether initialization is complete\n",
      "            var src='<html style=\"height:100%\"><head>' +\n",
      "                '<scr'+'ipt src=\"http://maps.googleapis.com/maps/api/js?sensor=false\"></scr'+'ipt>' +\n",
      "                '<scr'+'ipt>google.maps.event.addDomListener(window,\"load\",function(){ready=true});</scr'+'ipt>' +\n",
      "                '</head>' +\n",
      "                '<body style=\"height:100%; margin:0px; padding:0px\"></body></html>';\n",
      "            \n",
      "            // Create the Google Maps container element.\n",
      "            this.$iframe = $('<iframe />')\n",
      "                .css('width', '100%')\n",
      "                .css('height', '500px')\n",
      "                .attr('srcdoc', src)\n",
      "                .appendTo(this.$el);\n",
      "                        \n",
      "            var self = this; // hold onto this for initMapWhenReady\n",
      "\n",
      "            // Wait until maps library has finished loading in iframe, then create map\n",
      "            function initMapWhenReady() {\n",
      "                // Iframe document and window\n",
      "                var doc = self.$iframe[0].contentDocument;\n",
      "                var win = self.$iframe[0].contentWindow;\n",
      "                if (!win || !win.ready) {\n",
      "                    // Maps library not yet loaded;  try again soon\n",
      "                    setTimeout(initMapWhenReady, 20);\n",
      "                    return;\n",
      "                }\n",
      "\n",
      "                // Maps library finished loading.  Build map now.\n",
      "                var mapOptions = {\n",
      "                    center: new win.google.maps.LatLng(self.model.get('lat'), self.model.get('lng')),\n",
      "                    zoom: self.model.get('zoom')\n",
      "                };\n",
      "                var mapDiv = $('<div />')\n",
      "                    .css('width', '100%')\n",
      "                    .css('height', '100%')\n",
      "                    .appendTo($(doc.body));\n",
      "                self.map = new win.google.maps.Map(mapDiv[0], mapOptions);\n",
      "                \n",
      "                \n",
      "                // Add an event listeners for user panning, zooming, and resizing map\n",
      "                // TODO(rsargent): Bind self across all methods, and save some plumbing here\n",
      "                win.google.maps.event.addListener(self.map, 'bounds_changed', function () {\n",
      "                    self.handleBoundsChanged();\n",
      "                });\n",
      "                \n",
      "                self.initializeLayersControl();\n",
      "            }\n",
      "            initMapWhenReady();\n",
      "        },\n",
      "        \n",
      "        LayersControl: function(widget, controlDiv, map) {\n",
      "            var win = widget.$iframe[0].contentWindow;\n",
      "            var chicago = new win.google.maps.LatLng(41.850033, -87.6500523);\n",
      "\n",
      "            // Set CSS styles for the DIV containing the control\n",
      "            // Setting padding to 5 px will offset the control\n",
      "            // from the edge of the map.\n",
      "            controlDiv.style.padding = '5px';\n",
      "\n",
      "            // Set CSS for the control border.\n",
      "            var $controlUI = $('<div />')\n",
      "                .css('backgroundColor', 'white')\n",
      "                .css('borderStyle', 'solid')\n",
      "                .css('borderWidth', '1px')\n",
      "                .css('cursor', 'pointer')\n",
      "                .css('textAlign', 'center')\n",
      "                .appendTo($(controlDiv));\n",
      "            \n",
      "            // Set CSS for the control interior.\n",
      "            var $controlContents = $('<div />')\n",
      "                .css('fontFamily', 'Arial,sans-serif')\n",
      "                .css('fontSize', '12px')\n",
      "                .css('paddingLeft', '4px')\n",
      "                .css('paddingRight', '4px')\n",
      "                .css('paddingTop', '0px')\n",
      "                .css('paddingBottom', '0px')\n",
      "                .appendTo($controlUI);\n",
      "            \n",
      "            this.$controlTable = $('<table />')\n",
      "                .append($('<tr><td colspan=2>Layers</td></tr>'))\n",
      "                .appendTo($controlContents);\n",
      "        },\n",
      "\n",
      "        initializeLayersControl: function() {\n",
      "            var doc = this.$iframe[0].contentDocument;\n",
      "            var win = this.$iframe[0].contentWindow;\n",
      "\n",
      "            // Create the DIV to hold the control and call the LayersControl() constructor\n",
      "            // passing in this DIV.\n",
      "    \n",
      "            var layersControlDiv = document.createElement('div');\n",
      "            this.layersControl = new this.LayersControl(this, layersControlDiv, this.map);\n",
      "\n",
      "            layersControlDiv.index = 1;\n",
      "            this.map.controls[win.google.maps.ControlPosition.TOP_RIGHT].push(layersControlDiv);\n",
      "        },\n",
      "        \n",
      "        // Map geometry changed (pan, zoom, resize)\n",
      "        handleBoundsChanged: function() {\n",
      "            this.model.set('lng', this.map.getCenter().lng());\n",
      "            this.model.set('lat', this.map.getCenter().lat());\n",
      "            this.model.set('zoom', this.map.getZoom());\n",
      "            var bounds = this.map.getBounds();\n",
      "            var playgroundCompatible = [bounds.getSouthWest().lng(), bounds.getSouthWest().lat(),\n",
      "                                        bounds.getNorthEast().lng(), bounds.getNorthEast().lat()];\n",
      "            this.model.set('bounds', playgroundCompatible);\n",
      "            this.touch();\n",
      "        },\n",
      "        \n",
      "        // Receive custom messages from Python backend\n",
      "        on_msg: function(msg) {\n",
      "            var win = this.$iframe[0].contentWindow;\n",
      "            if (msg.command == 'addLayer') {\n",
      "                this.addLayer(msg.mapid, msg.token, msg.name, msg.visible);\n",
      "            } else if (msg.command == 'center') {\n",
      "                this.map.setCenter(new win.google.maps.LatLng(msg.lat, msg.lng));\n",
      "                if (msg.zoom !== null) {\n",
      "                    this.map.setZoom(msg.zoom);\n",
      "                }\n",
      "            }\n",
      "        },\n",
      "        \n",
      "        // Add an Earth Engine layer\n",
      "        addLayer: function(mapid, token, name, visible) {\n",
      "            var win = this.$iframe[0].contentWindow;\n",
      "            var eeMapOptions = {\n",
      "                getTileUrl: function(tile, zoom) {\n",
      "                    var url = ['https://earthengine.googleapis.com/map',\n",
      "                               mapid, zoom, tile.x, tile.y].join(\"/\");\n",
      "                    url += '?token=' + token\n",
      "                    return url;\n",
      "                },\n",
      "                tileSize: new win.google.maps.Size(256, 256),\n",
      "                opacity: visible ? 1.0 : 0.0,\n",
      "            };\n",
      "            \n",
      "            // Create the overlay map type\n",
      "            var mapType = new win.google.maps.ImageMapType(eeMapOptions);\n",
      "                \n",
      "            // Overlay the Earth Engine generated layer\n",
      "            this.map.overlayMapTypes.push(mapType);\n",
      "\n",
      "            // Update layer visibility control\n",
      "            var maxSlider = 100;\n",
      "            \n",
      "            function updateOpacity() {\n",
      "                mapType.setOpacity($checkbox[0].checked ? $slider[0].value / 100.0 : 0);\n",
      "            }\n",
      "            \n",
      "            var $checkbox = $('<input type=\"checkbox\">')\n",
      "                .prop('checked', visible)\n",
      "                .change(updateOpacity);\n",
      "            \n",
      "            var $slider = $('<input type=\"range\" />')\n",
      "                .prop('min', 0)\n",
      "                .prop('max', maxSlider)\n",
      "                .prop('value', maxSlider)\n",
      "                .css('width', '60px')\n",
      "                .on('input', updateOpacity);\n",
      "\n",
      "            // If user doesn't specify a layer name, create a default\n",
      "            if (name === null) {\n",
      "                name = 'Layer ' + this.map.overlayMapTypes.length;\n",
      "            }\n",
      "            \n",
      "            var $row = $('<tr />');\n",
      "            $('<td align=\"left\" />').append($checkbox).append(name).appendTo($row);\n",
      "            $('<td />').append($slider).appendTo($row);\n",
      "\n",
      "            this.layersControl.$controlTable.append($row);\n",
      "        }\n",
      "    });\n",
      "    \n",
      "    // Register the GoogleMapsView with the widget manager.\n",
      "    WidgetManager.register_widget_view('GoogleMapsView', GoogleMapsView);\n",
      "});\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "javascript": [
        "\n",
        "require([\"widgets/js/widget\"], function(WidgetManager){\n",
        "    var maps = [];\n",
        "    \n",
        "    // Define the GoogleMapsView\n",
        "    var GoogleMapsView = IPython.DOMWidgetView.extend({\n",
        "        \n",
        "        render: function() {\n",
        "            // Resize widget element to be 100% wide\n",
        "            this.$el.css('width', '100%');\n",
        "\n",
        "            // iframe source;  just enough to load Google Maps and let us poll whether initialization is complete\n",
        "            var src='<html style=\"height:100%\"><head>' +\n",
        "                '<scr'+'ipt src=\"http://maps.googleapis.com/maps/api/js?sensor=false\"></scr'+'ipt>' +\n",
        "                '<scr'+'ipt>google.maps.event.addDomListener(window,\"load\",function(){ready=true});</scr'+'ipt>' +\n",
        "                '</head>' +\n",
        "                '<body style=\"height:100%; margin:0px; padding:0px\"></body></html>';\n",
        "            \n",
        "            // Create the Google Maps container element.\n",
        "            this.$iframe = $('<iframe />')\n",
        "                .css('width', '100%')\n",
        "                .css('height', '500px')\n",
        "                .attr('srcdoc', src)\n",
        "                .appendTo(this.$el);\n",
        "                        \n",
        "            var self = this; // hold onto this for initMapWhenReady\n",
        "\n",
        "            // Wait until maps library has finished loading in iframe, then create map\n",
        "            function initMapWhenReady() {\n",
        "                // Iframe document and window\n",
        "                var doc = self.$iframe[0].contentDocument;\n",
        "                var win = self.$iframe[0].contentWindow;\n",
        "                if (!win || !win.ready) {\n",
        "                    // Maps library not yet loaded;  try again soon\n",
        "                    setTimeout(initMapWhenReady, 20);\n",
        "                    return;\n",
        "                }\n",
        "\n",
        "                // Maps library finished loading.  Build map now.\n",
        "                var mapOptions = {\n",
        "                    center: new win.google.maps.LatLng(self.model.get('lat'), self.model.get('lng')),\n",
        "                    zoom: self.model.get('zoom')\n",
        "                };\n",
        "                var mapDiv = $('<div />')\n",
        "                    .css('width', '100%')\n",
        "                    .css('height', '100%')\n",
        "                    .appendTo($(doc.body));\n",
        "                self.map = new win.google.maps.Map(mapDiv[0], mapOptions);\n",
        "                \n",
        "                \n",
        "                // Add an event listeners for user panning, zooming, and resizing map\n",
        "                // TODO(rsargent): Bind self across all methods, and save some plumbing here\n",
        "                win.google.maps.event.addListener(self.map, 'bounds_changed', function () {\n",
        "                    self.handleBoundsChanged();\n",
        "                });\n",
        "                \n",
        "                self.initializeLayersControl();\n",
        "            }\n",
        "            initMapWhenReady();\n",
        "        },\n",
        "        \n",
        "        LayersControl: function(widget, controlDiv, map) {\n",
        "            var win = widget.$iframe[0].contentWindow;\n",
        "            var chicago = new win.google.maps.LatLng(41.850033, -87.6500523);\n",
        "\n",
        "            // Set CSS styles for the DIV containing the control\n",
        "            // Setting padding to 5 px will offset the control\n",
        "            // from the edge of the map.\n",
        "            controlDiv.style.padding = '5px';\n",
        "\n",
        "            // Set CSS for the control border.\n",
        "            var $controlUI = $('<div />')\n",
        "                .css('backgroundColor', 'white')\n",
        "                .css('borderStyle', 'solid')\n",
        "                .css('borderWidth', '1px')\n",
        "                .css('cursor', 'pointer')\n",
        "                .css('textAlign', 'center')\n",
        "                .appendTo($(controlDiv));\n",
        "            \n",
        "            // Set CSS for the control interior.\n",
        "            var $controlContents = $('<div />')\n",
        "                .css('fontFamily', 'Arial,sans-serif')\n",
        "                .css('fontSize', '12px')\n",
        "                .css('paddingLeft', '4px')\n",
        "                .css('paddingRight', '4px')\n",
        "                .css('paddingTop', '0px')\n",
        "                .css('paddingBottom', '0px')\n",
        "                .appendTo($controlUI);\n",
        "            \n",
        "            this.$controlTable = $('<table />')\n",
        "                .append($('<tr><td colspan=2>Layers</td></tr>'))\n",
        "                .appendTo($controlContents);\n",
        "        },\n",
        "\n",
        "        initializeLayersControl: function() {\n",
        "            var doc = this.$iframe[0].contentDocument;\n",
        "            var win = this.$iframe[0].contentWindow;\n",
        "\n",
        "            // Create the DIV to hold the control and call the LayersControl() constructor\n",
        "            // passing in this DIV.\n",
        "    \n",
        "            var layersControlDiv = document.createElement('div');\n",
        "            this.layersControl = new this.LayersControl(this, layersControlDiv, this.map);\n",
        "\n",
        "            layersControlDiv.index = 1;\n",
        "            this.map.controls[win.google.maps.ControlPosition.TOP_RIGHT].push(layersControlDiv);\n",
        "        },\n",
        "        \n",
        "        // Map geometry changed (pan, zoom, resize)\n",
        "        handleBoundsChanged: function() {\n",
        "            this.model.set('lng', this.map.getCenter().lng());\n",
        "            this.model.set('lat', this.map.getCenter().lat());\n",
        "            this.model.set('zoom', this.map.getZoom());\n",
        "            var bounds = this.map.getBounds();\n",
        "            var playgroundCompatible = [bounds.getSouthWest().lng(), bounds.getSouthWest().lat(),\n",
        "                                        bounds.getNorthEast().lng(), bounds.getNorthEast().lat()];\n",
        "            this.model.set('bounds', playgroundCompatible);\n",
        "            this.touch();\n",
        "        },\n",
        "        \n",
        "        // Receive custom messages from Python backend\n",
        "        on_msg: function(msg) {\n",
        "            var win = this.$iframe[0].contentWindow;\n",
        "            if (msg.command == 'addLayer') {\n",
        "                this.addLayer(msg.mapid, msg.token, msg.name, msg.visible);\n",
        "            } else if (msg.command == 'center') {\n",
        "                this.map.setCenter(new win.google.maps.LatLng(msg.lat, msg.lng));\n",
        "                if (msg.zoom !== null) {\n",
        "                    this.map.setZoom(msg.zoom);\n",
        "                }\n",
        "            }\n",
        "        },\n",
        "        \n",
        "        // Add an Earth Engine layer\n",
        "        addLayer: function(mapid, token, name, visible) {\n",
        "            var win = this.$iframe[0].contentWindow;\n",
        "            var eeMapOptions = {\n",
        "                getTileUrl: function(tile, zoom) {\n",
        "                    var url = ['https://earthengine.googleapis.com/map',\n",
        "                               mapid, zoom, tile.x, tile.y].join(\"/\");\n",
        "                    url += '?token=' + token\n",
        "                    return url;\n",
        "                },\n",
        "                tileSize: new win.google.maps.Size(256, 256),\n",
        "                opacity: visible ? 1.0 : 0.0,\n",
        "            };\n",
        "            \n",
        "            // Create the overlay map type\n",
        "            var mapType = new win.google.maps.ImageMapType(eeMapOptions);\n",
        "                \n",
        "            // Overlay the Earth Engine generated layer\n",
        "            this.map.overlayMapTypes.push(mapType);\n",
        "\n",
        "            // Update layer visibility control\n",
        "            var maxSlider = 100;\n",
        "            \n",
        "            function updateOpacity() {\n",
        "                mapType.setOpacity($checkbox[0].checked ? $slider[0].value / 100.0 : 0);\n",
        "            }\n",
        "            \n",
        "            var $checkbox = $('<input type=\"checkbox\">')\n",
        "                .prop('checked', visible)\n",
        "                .change(updateOpacity);\n",
        "            \n",
        "            var $slider = $('<input type=\"range\" />')\n",
        "                .prop('min', 0)\n",
        "                .prop('max', maxSlider)\n",
        "                .prop('value', maxSlider)\n",
        "                .css('width', '60px')\n",
        "                .on('input', updateOpacity);\n",
        "\n",
        "            // If user doesn't specify a layer name, create a default\n",
        "            if (name === null) {\n",
        "                name = 'Layer ' + this.map.overlayMapTypes.length;\n",
        "            }\n",
        "            \n",
        "            var $row = $('<tr />');\n",
        "            $('<td align=\"left\" />').append($checkbox).append(name).appendTo($row);\n",
        "            $('<td />').append($slider).appendTo($row);\n",
        "\n",
        "            this.layersControl.$controlTable.append($row);\n",
        "        }\n",
        "    });\n",
        "    \n",
        "    // Register the GoogleMapsView with the widget manager.\n",
        "    WidgetManager.register_widget_view('GoogleMapsView', GoogleMapsView);\n",
        "});"
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.Javascript at 0x108abe290>"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Guido Lemoine's Feature Collection to Pandas Dataframe Function"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from geopandas import GeoDataFrame\n",
      "from shapely.geometry import shape\n",
      "\n",
      "\n",
      "def fc2df(fc):\n",
      "    # Convert a FeatureCollection into a pandas DataFrame\n",
      "  \n",
      "    # Features is a list of dict with the output\n",
      "    features = fc.getInfo()['features']\n",
      "\n",
      "    dictarr = []\n",
      "     \n",
      "    for f in features:\n",
      "        # Store all attributes in a dict\n",
      "        attr = f['properties']\n",
      "        # and treat geometry separately\n",
      "        attr['geometry'] = f['geometry']  # GeoJSON Feature!\n",
      "        # attr['geometrytype'] = f['geometry']['type']\n",
      "        dictarr.append(attr)\n",
      "      \n",
      "    df = GeoDataFrame(dictarr)\n",
      "    # Convert GeoJSON features to shape\n",
      "    #df['geometry'] = map(lambda s: shape(s), df.geometry)   \n",
      "    return df\n",
      "# End fc2df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Retrieve coordinates of CT state polygon:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "filename = \"/Users/Kit/CTpolygon.txt\"\n",
      "vertex_list = []\n",
      "\n",
      "with open(filename, 'r') as o_file:\n",
      "    line = o_file.readline()[1:-3]\n",
      "    while line:\n",
      "        line = line.split(',')\n",
      "        coords = [float(line[0]), float(line[1])]\n",
      "        \n",
      "        vertex_list.append(coords)\n",
      "        line = o_file.readline()[2:-3]\n",
      "        \n",
      "print(vertex_list[0:10])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[-72.3977171022447, 42.03309189931522], [-72.3885943398962, 42.03292197771742], [-72.3745266657436, 42.03280694244558], [-72.3681473358252, 42.03274819850335], [-72.3670431790677, 42.03273632331485], [-72.3580406358245, 42.03263917018669], [-72.3450571810366, 42.03235477126519], [-72.3368185442856, 42.032173740333064], [-72.3251543767583, 42.031953377553116], [-72.3249740439011, 42.03194997230511]]\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get images of elevation and night lights; clip to CT polygon, COMPUTE SLOPE and MASK \"RIVERS\":"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "map = GoogleMapsWidget(lat=41.5, lng=-73, zoom=9) # lat, lng and zoom are optional\n",
      "display(map)\n",
      "image1 = ee.Image('CGIAR/SRTM90_V4')\n",
      "image2 = ee.Image('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS/F152005')\n",
      "ct_geom = ee.Feature.Polygon(vertex_list, {'name':'Connecticut'})\n",
      "ct = ee.Feature(ct_geom)\n",
      "image1 = image1.clip(ct)\n",
      "image2 = image2.clip(ct)\n",
      "new = ee.Algorithms.Terrain(image1)\n",
      "#new.bandNames().getInfo()\n",
      "blank = ee.Image(0)\n",
      "blank = blank.clip(ct)\n",
      "slope = new.select('slope')\n",
      "elev = image1.select('elevation')\n",
      "rivers = blank.where(slope.gte(1).And(elev.gte(10)),1)\n",
      "rivers = rivers.mask(rivers)\n",
      "image1 = image1.mask(rivers)\n",
      "map.addLayer(image=image1, name='Elevation',vis_params={'min':50, 'max':500})\n",
      "map.addLayer(image=image2, name='Lights',vis_params={'min':0, 'max':100})\n",
      "map.addLayer(image=rivers, name='rivers',vis_params={'min':0, 'max':1}, visible=False)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Make 1000 random points and use them to sample both layers:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\n",
      "region = ee.Feature.Rectangle(-73, 41, -72,  42)\n",
      "rand_points = ee.FeatureCollection.randomPoints(region, 1000, 1000, 1)\n",
      "\n",
      "sample1 = image1.addBands(image1).reduceToVectors(reducer=\"mean\", geometry=rand_points, geometryType=\"centroid\", scale=30, crs=\"EPSG:4326\")\n",
      "sample2 = image2.reduceToVectors(reducer=\"mean\", geometry=rand_points, geometryType=\"centroid\", scale=30, crs=\"EPSG:4326\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Convert samples (ee Feature Collections) to joined (geo)pandas dataframe"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sample1df = fc2df(sample1)\n",
      "sample2df = fc2df(sample2)\n",
      "\n",
      "## big assumption is that order was preserved\n",
      "k = sample1df.join(sample2df, lsuffix='l', rsuffix='r')\n",
      "del k['labell']\n",
      "del k['geometryr']\n",
      "del k['cf_cvg']\n",
      "del k['avg_lights_x_pct']\n",
      "del k['labelr']\n",
      "k[0:10]\n",
      "## option to export to csv, shp, xls, many other formats"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>geometryl</th>\n",
        "      <th>mean</th>\n",
        "      <th>stable_lights</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 230</td>\n",
        "      <td> 11</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 198</td>\n",
        "      <td>  8</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td>  24</td>\n",
        "      <td> 15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 187</td>\n",
        "      <td> 21</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 192</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 166</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 133</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td>  66</td>\n",
        "      <td>  8</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 157</td>\n",
        "      <td> 15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9</th>\n",
        "      <td> {u'type': u'Point', u'geodesic': False, u'coor...</td>\n",
        "      <td> 100</td>\n",
        "      <td> 29</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "                                           geometryl  mean  stable_lights\n",
        "0  {u'type': u'Point', u'geodesic': False, u'coor...   230             11\n",
        "1  {u'type': u'Point', u'geodesic': False, u'coor...   198              8\n",
        "2  {u'type': u'Point', u'geodesic': False, u'coor...    24             15\n",
        "3  {u'type': u'Point', u'geodesic': False, u'coor...   187             21\n",
        "4  {u'type': u'Point', u'geodesic': False, u'coor...   192              6\n",
        "5  {u'type': u'Point', u'geodesic': False, u'coor...   166              6\n",
        "6  {u'type': u'Point', u'geodesic': False, u'coor...   133              6\n",
        "7  {u'type': u'Point', u'geodesic': False, u'coor...    66              8\n",
        "8  {u'type': u'Point', u'geodesic': False, u'coor...   157             15\n",
        "9  {u'type': u'Point', u'geodesic': False, u'coor...   100             29"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Perform OLS regression on data columns:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%%bash\n",
      "r --no-save\n",
      "print(\"Hi I'm printing this in R.\")\n",
      "q()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "R version 3.0.2 (2013-09-25) -- \"Frisbee Sailing\"\n",
        "Copyright (C) 2013 The R Foundation for Statistical Computing\n",
        "Platform: x86_64-apple-darwin10.8.0 (64-bit)\n",
        "\n",
        "R is free software and comes with ABSOLUTELY NO WARRANTY.\n",
        "You are welcome to redistribute it under certain conditions.\n",
        "Type 'license()' or 'licence()' for distribution details.\n",
        "\n",
        "  Natural language support but running in an English locale\n",
        "\n",
        "R is a collaborative project with many contributors.\n",
        "Type 'contributors()' for more information and\n",
        "'citation()' on how to cite R or R packages in publications.\n",
        "\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n",
        "'help.start()' for an HTML browser interface to help.\n",
        "Type 'q()' to quit R.\n",
        "\n",
        "> print(\"Hi I'm printing this in R.\")\n",
        "[1] \"Hi I'm printing this in R.\"\n",
        "> q()\n"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import statsmodels.formula.api as sm\n",
      "Y = k['mean']\n",
      "X = k['stable_lights']\n",
      "result = sm.ols(formula=\"Y ~ X\", data=k).fit()\n",
      "print (result.summary())\n",
      "intercept = result.params[0]\n",
      "slope = result.params[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:                      Y   R-squared:                       0.005\n",
        "Model:                            OLS   Adj. R-squared:                  0.004\n",
        "Method:                 Least Squares   F-statistic:                     3.742\n",
        "Date:                Tue, 25 Nov 2014   Prob (F-statistic):             0.0535\n",
        "Time:                        09:22:38   Log-Likelihood:                -3960.2\n",
        "No. Observations:                 686   AIC:                             7924.\n",
        "Df Residuals:                     684   BIC:                             7933.\n",
        "Df Model:                           1                                         \n",
        "==============================================================================\n",
        "                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "------------------------------------------------------------------------------\n",
        "Intercept    128.1177      5.190     24.686      0.000       117.928   138.308\n",
        "X             -0.3069      0.159     -1.934      0.053        -0.618     0.005\n",
        "==============================================================================\n",
        "Omnibus:                       55.742   Durbin-Watson:                   1.546\n",
        "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               67.572\n",
        "Skew:                           0.761   Prob(JB):                     2.12e-15\n",
        "Kurtosis:                       3.223   Cond. No.                         57.1\n",
        "==============================================================================\n"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Take a look at the random sample and regression line:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from matplotlib import pyplot as plt\n",
      "plt.plot(X, Y, '.')                     # plots the points\n",
      "plt.plot(X, slope*X + intercept, 'r')             \n",
      "plt.show()  "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x108abed10>"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Return coefficients to make predicted image layer in ee:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "slope_image = ee.Image.constant(slope)\n",
      "int_image = ee.Image.constant(intercept)\n",
      "\n",
      "temp = image1.multiply(slope_image)\n",
      "predicted_image = temp.add(int_image)\n",
      "error_image = image2.subtract(predicted_image)\n",
      "error_image = error_image.abs()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Display:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "map = GoogleMapsWidget(lat=41.5, lng=-73, zoom=9) # lat, lng and zoom are optional\n",
      "display(map)\n",
      "PALETTE = ['DC143C','EA728A','F8DOD8','EA728a','DC143C']\n",
      "map.addLayer(image=image2, name='Measured',vis_params={'min':0, 'max':100})\n",
      "map.addLayer(image=predicted_image, name='Predicted',vis_params={'min':0, 'max':200})\n",
      "map.addLayer(image=error_image, name='Error',vis_params={'min':0, 'max':150}, visible=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Download the elevation image (you must click on the link to download):"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "durl = image1.getDownloadUrl() \n",
      "print (durl)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "https://earthengine.googleapis.com//api/download?docid=c241c91ec01830dc46bc619735fb4276&token=b80018cd8846be6aa237a6af4a80871e\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Take the slope using gdaldem:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%%bash \n",
      "#filename=\"Users/Kit/Desktop/SRTM90_V4/SRTM90_V4.elevation.tif\"\n",
      "#slope_image=\"Users/Kit/slope.tif\"\n",
      "gdaldem slope '/Users/Kit/Desktop/SRTM90_V4/SRTM90_V4.elevation.tif' '/Users/Kit/Desktop/slope.tif'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0...10...20...30...40...50...60...70...80...90...100 - done.\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "slope_raster = '/Users/Kit/Desktop/slope.tif'\n",
      "\n",
      "import matplotlib.image as mpimg\n",
      "img=mpimg.imread(slope_raster)\n",
      "imgplot = plt.imshow(img)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x118638b10>"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "##Ben Carlson's point list to feature collection function\n",
      "def rowsToFC(rows):\n",
      "    \n",
      "    #id, longitude, latitude, observation_date, effort_distance_km\n",
      "    if len(rows) == 0:\n",
      "        return None\n",
      "    else:\n",
      "        #Create an array of Points\n",
      "        pts = []\n",
      "\n",
      "        for row in rows:\n",
      "            f = ee.Feature(\n",
      "                  ee.Feature.Point(\n",
      "                     [row[1],row[2]]),\n",
      "                     {'annotate_id': row[0],\n",
      "                      'month':row[3].month})\n",
      "\n",
      "            #f.buffer(row[4])\n",
      "            pts.append(f) \n",
      "\n",
      "        #Create a FeatureCollection from that array\n",
      "        pts_fc = ee.FeatureCollection(pts)\n",
      "        return pts_fc"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#map = GoogleMapsWidget(lat=41.5, lng=-73, zoom=9) # lat, lng and zoom are optional\n",
      "#display(map)\n",
      "#map.addLayer(image=sample1,vis_params={'min':0, 'max':17}, name=\"{0} points\".format(1000))\n",
      "#map.addLayer(image=ee.Image.paint(image1, ee.FeatureCollection(rand_points), 0, 2),name=\"Region\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ee.data.getMapId?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 122
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}